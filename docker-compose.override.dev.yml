# Development Environment Override
# Ïù¥ ÌååÏùºÏùÄ Í∞úÎ∞úÌôòÍ≤ΩÏóêÏÑú ÏûêÎèôÏúºÎ°ú Î°úÎìúÎê©ÎãàÎã§
# Casino-Club F2P - Enhanced Development Configuration

version: "3.8"

services:
  # Backend Development Configuration
  backend:
    container_name: cc_backend_dev
    environment:
      - HOT_RELOAD=true
      - PYTHONPATH=/app
      - PYTHONDONTWRITEBYTECODE=1
      - PYTHONUNBUFFERED=1
      - DEBUG=true
      - APP_ENV=development
      - LOG_LEVEL=DEBUG
    volumes:
      - ./cc-webapp/backend:/app:rw
      - ./logs/backend:/app/logs:rw
      - backend_cache:/app/__pycache__
    networks:
      - ccnet
    restart: unless-stopped
    command: >
      sh -c "
        echo 'üöÄ Starting Backend Development Server...' &&
        pip install -e . &&
        uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload --reload-dir /app --log-level debug
      "

  # Frontend Development Configuration
  frontend:
    build:
      context: ./cc-webapp/frontend
      dockerfile: Dockerfile.dev
    container_name: cc_frontend_dev
    environment:
      - FAST_REFRESH=true
      - NEXT_TELEMETRY_DISABLED=1
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://localhost:${BACKEND_PORT:-8000}
      - NEXT_PUBLIC_WS_URL=ws://localhost:${BACKEND_PORT:-8000}
      # Turbopack ÏµúÏ†ÅÌôî
      - TURBOPACK=1
      - NEXT_EXPERIMENTAL_APP_DIR=true
    volumes:
      - ./cc-webapp/frontend:/app:rw
      - frontend_node_modules:/app/node_modules
      - frontend_next:/app/.next
      - frontend_turbo:/app/.turbo
    networks:
      - ccnet
    restart: unless-stopped
    command: >
      sh -c "
        echo '[üöÄ] Starting Frontend Development Server with Turbopack...' &&
        echo '[üì¶] Checking dependencies...' &&
        npm ci &&
        echo '[üîß] Cleaning cache...' &&
        npm run clean || true &&
        echo '[‚ö°] Starting dev server...' &&
        npm run dev --turbo
      "

  # PostgreSQL Development Configuration
  postgres:
    container_name: cc_postgres_dev
    volumes:
      - postgres_data_dev:/var/lib/postgresql/data
      - ./data/init:/docker-entrypoint-initdb.d:ro
      - ./logs/postgres:/var/log/postgresql:rw
    networks:
      - ccnet
    restart: unless-stopped

  # Redis Development Configuration
  redis:
    container_name: cc_redis_dev
    volumes:
      - redis_data_dev:/data
    networks:
      - ccnet
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru

  # Zookeeper Development Configuration
  cc_zookeeper:
    container_name: cc_zookeeper_dev
    networks:
      - ccnet
    restart: unless-stopped

  # Kafka Development Configuration
  cc_kafka:
    container_name: cc_kafka_dev
    volumes:
      - kafka_data_dev:/var/lib/kafka/data
    networks:
      - ccnet
    restart: unless-stopped

  # Celery Worker Development Configuration
  celery-worker:
    container_name: cc_celery_worker_dev
    environment:
      - PYTHONPATH=/app
      - PYTHONDONTWRITEBYTECODE=1
      - PYTHONUNBUFFERED=1
      - DEBUG=true
      - APP_ENV=development
    volumes:
      - ./cc-webapp/backend:/app:rw
      - ./logs/celery:/app/logs:rw
    networks:
      - ccnet
    restart: unless-stopped
    command: >
      sh -c "
        echo 'üîÑ Starting Celery Worker (Development)...' &&
        pip install -e . &&
        celery -A app.core.celery_app worker --loglevel=debug --concurrency=2
      "

  # Celery Beat Development Configuration
  celery-beat:
    container_name: cc_celery_beat_dev
    environment:
      - PYTHONPATH=/app
      - PYTHONDONTWRITEBYTECODE=1
      - PYTHONUNBUFFERED=1
      - DEBUG=true
      - APP_ENV=development
    volumes:
      - ./cc-webapp/backend:/app:rw
      - ./logs/celery:/app/logs:rw
    networks:
      - ccnet
    restart: unless-stopped
    command: >
      sh -c "
        echo '‚è∞ Starting Celery Beat (Development)...' &&
        pip install -e . &&
        celery -A app.core.celery_app beat --loglevel=debug
      "

  # Development Tools - pgAdmin
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: cc_pgadmin_dev
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-admin@casino-club.local}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin123}
      PGADMIN_CONFIG_SERVER_MODE: "False"
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data_dev:/var/lib/pgadmin
    networks:
      - ccnet
    depends_on:
      - postgres
    profiles:
      - tools

  # Development Tools - Redis Commander
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: cc_redis_commander_dev
    restart: unless-stopped
    environment:
      - REDIS_HOSTS=local:redis:6379
    ports:
      - "${REDIS_COMMANDER_PORT:-8081}:8081"
    networks:
      - ccnet
    depends_on:
      - redis
    profiles:
      - tools

  # Development Tools - Kafka UI
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: cc_kafka_ui_dev
    restart: unless-stopped
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: cc_kafka:9093
      KAFKA_CLUSTERS_0_ZOOKEEPER: cc_zookeeper:2181
    ports:
      - "8082:8080"
    networks:
      - ccnet
    depends_on:
      - cc_kafka
    profiles:
      - tools

volumes:
  postgres_data_dev:
    driver: local
  redis_data_dev:
    driver: local
  kafka_data_dev:
    driver: local
  pgadmin_data_dev:
    driver: local
  frontend_node_modules:
    driver: local
  frontend_next:
    driver: local
  frontend_turbo:
    driver: local
  backend_cache:
    driver: local

networks:
  ccnet:
    driver: bridge
    ipam:
      config:
        - subnet: 172.28.0.0/16
