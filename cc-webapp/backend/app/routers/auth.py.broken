"""KOREAN_TEXT_REMOVED Í¥ÄKOREAN_TEXT_REMOVEDAPI KOREAN_TEXT_REMOVED""
import logging
from datetime import datetime
from typing import Optional

from fastapi import APIRouter, Depends, HTTPException, status, Request
from fastapi.security import HTTPAuthorizationCredentials, HTTPBearer
from pydantic import BaseModel

from ..database import get_db
from ..schemas.auth import UserCreate, UserLogin, AdminLogin, UserResponse, Token
from ..services.auth_service import AuthService, security
from ..models.auth_models import User, InviteCode
from ..config_simple import settings

# Î°KOREAN_TEXT_REMOVED KOREAN_TEXT_REMOVED§ÏKOREAN_TEXT_REMOVED
logger = logging.getLogger(__name__)

# Auth service KOREAN_TEXT_REMOVED
auth_service = AuthService()

# OAuth2 KOREAN_TEXT_REMOVED§ÌKOREAN_TEXT_REMOVEDÎßKOREAN_TEXT_REMOVED
oauth2_scheme = HTTPBearer()

# KOREAN_TEXT_REMOVED§ÏKOREAN_TEXT_REMOVEDÍ∞KOREAN_TEXT_REMOVED
JWT_EXPIRE_MINUTES = settings.jwt_expire_minutes
INITIAL_CYBER_TOKENS = getattr(settings, 'initial_cyber_tokens', 200)

router = APIRouter(tags=["authentication"])


@router.post("/signup", response_model=Token)
async def signup(
    data: UserCreate,
    db = Depends(get_db)
):
    """KOREAN_TEXT_REMOVED¨ÏKOREAN_TEXT_REMOVEDÍ∞ÄKOREAN_TEXT_REMOVED(KOREAN_TEXT_REMOVED 5Í∞KOREAN_TEXT_REMOVED: KOREAN_TEXT_REMOVED¨ÏKOREAN_TEXT_REMOVED, KOREAN_TEXT_REMOVED KOREAN_TEXT_REMOVEDÎ≤KOREAN_TEXT_REMOVED, Ï¥KOREAN_TEXT_REMOVEDÏΩKOREAN_TEXT_REMOVED, ÎπKOREAN_TEXT_REMOVEDÎ≤KOREAN_TEXT_REMOVED)"""
    try:
        logger.info(f"KOREAN_TEXT_REMOVEDÍ∞ÄKOREAN_TEXT_REMOVED: site_id={data.site_id}, nickname={data.nickname}")
        
        # AuthServiceÎ•KOREAN_TEXT_REMOVED KOREAN_TEXT_REMOVED¨ÏKOREAN_TEXT_REMOVED
        user = auth_service.create_user(db, data)
        
        # KOREAN_TEXT_REMOVED KOREAN_TEXT_REMOVED
        access_token = auth_service.create_access_token(
            data={"sub": user.site_id, "user_id": user.id}
        )
        
        # KOREAN_TEXT_REMOVED¨ÏKOREAN_TEXT_REMOVED KOREAN_TEXT_REMOVED
        user_response = UserResponse(
            id=user.id,
            site_id=user.site_id,
            nickname=user.nickname,
            phone_number=user.phone_number,
            cyber_token_balance=user.cyber_token_balance,
            created_at=user.created_at,
            last_login=user.last_login,
            is_admin=user.is_admin,
            is_active=user.is_active
        )
        
        logger.info(f"KOREAN_TEXT_REMOVEDÍ∞ÄKOREAN_TEXT_REMOVED: user_id={user.id}")
        
        return Token(
            access_token=access_token,
            token_type="bearer",
            user=user_response
        )
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Signup error: {e}")
        raise HTTPException(status_code=500, detail="KOREAN_TEXT_REMOVEDÍ∞ÄKOREAN_TEXT_REMOVEDÏ≤KOREAN_TEXT_REMOVED¶¨ Ï§KOREAN_TEXT_REMOVED§ÎKOREAN_TEXT_REMOVEDÍ∞Ä Î∞KOREAN_TEXT_REMOVED")


@router.post("/login", response_model=Token)
async def login(
    form_data: UserLogin,
    db = Depends(get_db)
):
    """KOREAN_TEXT_REMOVED¨ÏKOREAN_TEXT_REMOVEDÎ°KOREAN_TEXT_REMOVED""
    try:
        logger.info(f"Î°KOREAN_TEXT_REMOVED: site_id={form_data.site_id}")
        
        # KOREAN_TEXT_REMOVED¨ÏKOREAN_TEXT_REMOVED
        user = auth_service.authenticate_user(form_data.site_id, form_data.password, db)
        if not user:
            logger.warning(f"Î°KOREAN_TEXT_REMOVED§ÌKOREAN_TEXT_REMOVED: KOREAN_TEXT_REMOVED™ªKOREAN_TEXT_REMOVED Ï¶KOREAN_TEXT_REMOVED - site_id={form_data.site_id}")
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail="KOREAN_TEXT_REMOVED™ªKOREAN_TEXT_REMOVED¨ÏKOREAN_TEXT_REMOVEDID KOREAN_TEXT_REMOVED ÎπKOREAN_TEXT_REMOVEDÎ≤KOREAN_TEXT_REMOVED,
                headers={"WWW-Authenticate": "Bearer"},
            )
        
        # KOREAN_TEXT_REMOVED KOREAN_TEXT_REMOVED
        access_token = auth_service.create_access_token(
            data={"sub": user.site_id, "user_id": user.id}
        )
        
        # ÎßKOREAN_TEXT_REMOVEDÎßKOREAN_TEXT_REMOVEDÎ°KOREAN_TEXT_REMOVED KOREAN_TEXT_REMOVED
        user.last_login = datetime.utcnow()
        db.commit()
        
        # KOREAN_TEXT_REMOVED¨ÏKOREAN_TEXT_REMOVED KOREAN_TEXT_REMOVED
        user_response = UserResponse(
            id=user.id,
            site_id=user.site_id,
            nickname=user.nickname,
            phone_number=user.phone_number,
            cyber_token_balance=user.cyber_token_balance,
            created_at=user.created_at,
            last_login=user.last_login,
            is_admin=user.is_admin,
            is_active=user.is_active
        )
        
        logger.info(f"Î°KOREAN_TEXT_REMOVED: user_id={user.id}")
        
        return Token(
            access_token=access_token,
            token_type="bearer",
            user=user_response
        )
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Login error: {e}")
        raise HTTPException(status_code=500, detail="Î°KOREAN_TEXT_REMOVEDÏ≤KOREAN_TEXT_REMOVED¶¨ Ï§KOREAN_TEXT_REMOVED§ÎKOREAN_TEXT_REMOVEDÍ∞Ä Î∞KOREAN_TEXT_REMOVED")
